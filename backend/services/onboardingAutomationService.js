const EmployeeOnboardingDocument = require('../models/EmployeeOnboardingDocument');
const ContractTemplate = require('../models/ContractTemplate');
const ContractInstance = require('../models/ContractInstance');
const Employee = require('../models/Employee');
const contractEmailService = require('./contractEmailService');

/**
 * Onboarding Automation Service
 * Automatically creates and sends required documents when employees are created
 */

class OnboardingAutomationService {
  /**
   * Define required documents by region
   */
  getRequiredDocuments(region) {
    const documents = {
      usa: [
        { type: 'employment_agreement', name: 'Employment Agreement', templateName: 'Employment Agreement - USA' },
        { type: 'i9', name: 'Form I-9', templateName: 'Form I-9' },
        { type: 'w4', name: 'Form W-4', templateName: 'Form W-4' },
        { type: 'nda', name: 'NDA', templateName: 'NDA - USA' },
        { type: 'direct_deposit', name: 'Direct Deposit Authorization', templateName: 'Direct Deposit Authorization' },
      ],
      india: [
        { type: 'employment_contract', name: 'Employment Contract', templateName: 'Employment Contract - India' },
        { type: 'appointment_letter', name: 'Appointment Letter', templateName: 'Appointment Letter - India' },
        { type: 'nda', name: 'NDA', templateName: 'NDA - India' },
        { type: 'epf_form11', name: 'EPF Form 11', templateName: 'Form 11 (EPF)' },
        { type: 'gratuity', name: 'Gratuity Nomination', templateName: 'Gratuity Nomination' },
      ],
    };

    return documents[region.toLowerCase()] || documents.usa; // Default to USA
  }

  /**
   * Create onboarding checklist for new employee
   */
  async createOnboardingChecklist(employee) {
    try {
      console.log(`üìã Creating onboarding checklist for: ${employee.first_name} ${employee.last_name}`);

      const region = employee.region || 'usa';
      const requiredDocuments = this.getRequiredDocuments(region);

      // Calculate due date (7 days from now)
      const dueDate = new Date();
      dueDate.setDate(dueDate.getDate() + 7);

      const checklistItems = [];

      for (const doc of requiredDocuments) {
        // Find template
        const template = await ContractTemplate.findOne({
          where: {
            name: doc.templateName,
            isActive: true,
          },
        });

        if (!template) {
          console.warn(`‚ö†Ô∏è Template not found: ${doc.templateName}`);
          continue;
        }

        // Create contract instance
        const contractNumber = this.generateContractNumber();
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 7);

        const instance = await ContractInstance.create({
          templateId: template.id,
          contractNumber,
          title: `${doc.name} - ${employee.first_name} ${employee.last_name}`,
          recipientType: 'employee',
          recipientId: employee.id,
          recipientEmail: employee.email,
          recipientName: `${employee.first_name} ${employee.last_name}`,
          status: 'draft',
          expiresAt,
          originalFilePath: template.filePath,
          metadata: {
            employeeId: employee.id,
            region: employee.region,
            autoGenerated: true,
          },
        });

        // Create onboarding document entry
        const onboardingDoc = await EmployeeOnboardingDocument.create({
          employeeId: employee.id,
          contractInstanceId: instance.id,
          documentType: doc.type,
          documentName: doc.name,
          status: 'pending',
          required: true,
          dueDate: dueDate.toISOString().split('T')[0],
        });

        checklistItems.push(onboardingDoc);

        console.log(`‚úÖ Created onboarding document: ${doc.name}`);
      }

      console.log(`‚úÖ Created ${checklistItems.length} onboarding documents for employee ${employee.id}`);

      return {
        success: true,
        documents: checklistItems,
      };
    } catch (error) {
      console.error('‚ùå Error creating onboarding checklist:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Send all onboarding documents to employee
   */
  async sendOnboardingDocuments(employeeId) {
    try {
      console.log(`üìß Sending onboarding documents to employee ${employeeId}`);

      // Get employee
      const employee = await Employee.findByPk(employeeId);
      if (!employee) {
        throw new Error('Employee not found');
      }

      // Get pending onboarding documents
      const onboardingDocs = await EmployeeOnboardingDocument.findAll({
        where: {
          employeeId,
          status: 'pending',
        },
        include: [{
          model: ContractInstance,
          as: 'contractInstance',
        }],
      });

      let sentCount = 0;

      for (const doc of onboardingDocs) {
        if (!doc.contractInstance) continue;

        // Update instance status to 'sent'
        doc.contractInstance.status = 'sent';
        doc.contractInstance.sentDate = new Date();
        await doc.contractInstance.save();

        // Send email
        await contractEmailService.sendContract(doc.contractInstance);

        // Update onboarding document status
        doc.status = 'sent';
        await doc.save();

        sentCount++;
      }

      console.log(`‚úÖ Sent ${sentCount} onboarding documents`);

      return {
        success: true,
        sentCount,
      };
    } catch (error) {
      console.error('‚ùå Error sending onboarding documents:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Check for overdue documents and update status
   */
  async checkOverdueDocuments() {
    try {
      const today = new Date().toISOString().split('T')[0];

      const overdueCount = await EmployeeOnboardingDocument.update(
        { status: 'overdue' },
        {
          where: {
            dueDate: { [require('sequelize').Op.lt]: today },
            status: ['pending', 'sent', 'in_progress'],
          },
        }
      );

      console.log(`‚úÖ Marked ${overdueCount[0]} documents as overdue`);

      return {
        success: true,
        count: overdueCount[0],
      };
    } catch (error) {
      console.error('‚ùå Error checking overdue documents:', error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  /**
   * Helper: Generate unique contract number
   */
  generateContractNumber() {
    const timestamp = Date.now().toString().slice(-8);
    const random = Math.random().toString(36).substr(2, 4).toUpperCase();
    return `CONT-${timestamp}-${random}`;
  }
}

module.exports = new OnboardingAutomationService();

